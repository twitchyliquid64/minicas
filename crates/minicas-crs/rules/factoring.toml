[sub-mul-common-rhs]
match.op = '-'
match.lhs = {op = '*'}
match.rhs = {op = '*'}
match.equal = [{l = [0, 1], r = [1, 1]}]

tests = [
    {from = '(a*x) - (b*x)', to = '(a-b) * x'},
]
[sub-mul-common-rhs.rewrite]
base = "(1-2) * 3"
replace = [
    [[0, 0], [0, 0]],
    [[1, 0], [0, 1]],
    [[0, 1], [1]],
]
fold = [
    [0],
]

[sub-mul-common-lhs]
match.op = '-'
match.lhs = {op = '*'}
match.rhs = {op = '*'}
match.equal = [{l = [0, 0], r = [1, 0]}]

tests = [
    {from = '(x*a) - (x*b)', to = '(a-b) * x'},
]
[sub-mul-common-lhs.rewrite]
base = "(1-2) * 3"
replace = [
    [[0, 1], [0, 0]],
    [[1, 1], [0, 1]],
    [[0, 0], [1]],
]
fold = [
    [0],
]

[add-mul-common-rhs]
match.op = '+'
match.lhs = {op = '*'}
match.rhs = {op = '*'}
match.equal = [{l = [0, 1], r = [1, 1]}]

tests = [
    {from = '(a*x) + (b*x)', to = '(a+b) * x'},
]
[add-mul-common-rhs.rewrite]
base = "(1+2) * 3"
replace = [
    [[0, 0], [0, 0]],
    [[1, 0], [0, 1]],
    [[0, 1], [1]],
]
fold = [
    [0],
]

[add-mul-common-lhs]
match.op = '+'
match.lhs = {op = '*'}
match.rhs = {op = '*'}
match.equal = [{l = [0, 0], r = [1, 0]}]

tests = [
    {from = '(x*a) + (x*b)', to = '(a+b) * x'},
]
[add-mul-common-lhs.rewrite]
base = "(1+2) * 3"
replace = [
    [[0, 1], [0, 0]],
    [[1, 1], [0, 1]],
    [[0, 0], [1]],
]
fold = [
    [0],
]

[mul-coefficients-lhs]
match.op = '*'
match.lhs = {op = 'const'}
match.rhs = {op = '*', lhs = {op = 'const'}}

tests = [
    {from = '2 * 3x', to = '6x'},
]
[mul-coefficients-lhs.rewrite]
base = "(1*2) * 3"
replace = [
    [[0], [0, 0]],
    [[1, 0], [0, 1]],
    [[1, 1], [1]],
]
fold = [
    [0],
]

[mul-coefficients-rhs]
match.op = '*'
match.lhs = {op = '*', lhs = {op = 'const'}}
match.rhs = {op = 'const'}

tests = [
    {from = '3x * 2', to = '6x'},
]
[mul-coefficients-rhs.rewrite]
base = "(1*2) * 3"
replace = [
    [[1], [0, 0]],
    [[0, 0], [0, 1]],
    [[0, 1], [1]],
]
fold = [
    [0],
]

[mul-nested-coefficients-lhs]
match.op = '*'
match.lhs = {op = '*', lhs = {op = 'const'}}
match.rhs = {op = '*', lhs = {op = 'const'}}
match.equal = [{l = [0, 1], r = [1, 1]}]

tests = [
    {from = '2x * 3x', to = '6 * pow(x, 2)'},
]
[mul-nested-coefficients-lhs.rewrite]
base = "(1*2) * pow(3, 2)"
replace = [
    [[0, 0], [0, 0]],
    [[1, 0], [0, 1]],
    [[0, 1], [1, 0]],
]
fold = [
    [0],
]

[mul-nested-coefficients-inner]
match.op = '*'
match.lhs = {op = '*', rhs = {op = 'const'}}
match.rhs = {op = '*', lhs = {op = 'const'}}
match.equal = [{l = [0, 0], r = [1, 1]}]

tests = [
    {from = '(x*4) * 3x', to = '12 * pow(x, 2)'},
]
[mul-nested-coefficients-inner.rewrite]
base = "(1*2) * pow(3, 2)"
replace = [
    [[0, 1], [0, 0]],
    [[1, 0], [0, 1]],
    [[0, 0], [1, 0]],
]
fold = [
    [0],
]

[mul-with-pow-rhs-same-operand]
match.op = '*'
match.rhs = {op = 'pow', rhs = {op = 'const'}}
match.equal = [{l = [0], r = [1, 0]}]

tests = [
    {from = 'x * pow(x, 2)', to = 'pow(x, 3)'},
    {from = 'x * pow(x, 3)', to = 'pow(x, 4)'},
]
[mul-with-pow-rhs-same-operand.rewrite]
base = "pow(1, 2+1)"
replace = [
    [[0], [0]],
    [[1, 1], [1, 0]],
]
fold = [
    [1],
]
[mul-with-pow-lhs-same-operand]
match.op = '*'
match.lhs = {op = 'pow', rhs = {op = 'const'}}
match.equal = [{l = [0, 0], r = [1]}]

tests = [
    {from = 'pow(x, 2) * x', to = 'pow(x, 3)'},
    {from = 'pow(x, 3) * x', to = 'pow(x, 4)'},
]
[mul-with-pow-lhs-same-operand.rewrite]
base = "pow(1, 2+1)"
replace = [
    [[1], [0]],
    [[0, 1], [1, 0]],
]
fold = [
    [1],
]