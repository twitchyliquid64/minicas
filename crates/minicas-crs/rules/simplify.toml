[mul-coefficients-on-lhs]
meta = {is_simplify = true}
match.op = '*'
match.lhs = {not_op = 'const'}
match.rhs = {op = 'const'}
action.swap = [[0], [1]]
tests = [
	{from = 'x * 4', to = '4x'},
	{from = '3x * 2', to = '2 * 3x'},
]

[add-offsets-on-rhs]
meta = {is_simplify = true}
match.op = '+'
match.lhs = {op = 'const'}
match.rhs = {not_op = 'const'}
action.swap = [[0], [1]]
tests = [
	{from = '4 + x', to = 'x + 4'},
]


[elim-negation-of-negation]
meta = {is_simplify = true}
match.op = 'neg'
match.lhs = {op = 'neg'}
replace.from = [0, 0]
replace.to = []
tests = [
	{from = '--a', to = 'a'},
]


[elim-mul-by-1]
meta = {is_simplify = true}
match.op = '*'
match.lhs = {const = '1'}
replace.from = [1]
replace.to = []
tests = [
	{from = '1 * 12', to = '12'},
]

[elim-mul-by-0]
meta = {is_simplify = true}
match.op = '*'
match.lhs = {const = '0'}
replace.from = [0]
replace.to = []
tests = [
	{from = '0 * a', to = '0'},
]

[elim-div-denom-1]
meta = {is_simplify = true}
match.op = '/'
match.rhs = {const = '1'}
replace.from = [0] # using the numerator (first lhs)
replace.to = []    # overwrite self
tests = [
	{from = '12 / 1', to = '12'},
]

[elim-div-num-0]
meta = {is_simplify = true}
match.op = '/'
match.lhs = {const = '0'}
replace.from = [0]
replace.to = []
tests = [
	{from = '0 / a', to = '0'},
]


[abs-of-negation]
meta = {is_simplify = true}
match.op = 'abs'
match.lhs = {op = 'neg'}
replace.from = [0, 0]
replace.to = [0]
tests = [
	{from = '|-a|', to = '|a|'},
]
[elim-abs-of-abs]
meta = {is_simplify = true}
match.op = 'abs'
match.lhs = {op = 'abs'}
replace.from = [0]
replace.to = []
tests = [
	{from = '||2x||', to = '|2x|'},
]

[div-with-two-negations]
meta = {is_simplify = true}
match.op = '/'
match.lhs = {op = 'neg'}
match.rhs = {op = 'neg'}
actions = [
    {from = [0, 0], to = [0]},
    {from = [1, 0], to = [1]},
]
tests = [
	{from = '(-a)/(-b)', to = 'a/b'},
]

[mul-with-two-negations]
meta = {is_simplify = true}
match.op = '*'
match.lhs = {op = 'neg'}
match.rhs = {op = 'neg'}
actions = [
    {from = [0, 0], to = [0]},
    {from = [1, 0], to = [1]},
]
tests = [
	{from = '(-a) * (-b)', to = 'a*b'},
]

[add-with-two-negations]
meta = {is_simplify = true}
match.op = '+'
match.lhs = {op = 'neg'}
match.rhs = {op = 'neg'}
tests = [
	{from = '(-a) + (-b)', to = '-(a+b)'},
]
[add-with-two-negations.rewrite]
base = "-(1 + 1)"
replace = [
    [[0, 0], [0, 0]],
    [[1, 0], [0, 1]],
]

[add-with-rhs-negation]
meta = {is_simplify = true}
match.op = '+'
match.lhs = {not_op = 'neg'}
match.rhs = {op = 'neg'}
tests = [
	{from = 'a + (-b)', to = 'a - b'},
]
[add-with-rhs-negation.rewrite]
base = "1 - 1"
replace = [
    [[0], [0]],
    [[1, 0], [1]],
]

[add-with-lhs-negation]
meta = {is_simplify = true}
match.op = '+'
match.lhs = {op = 'neg'}
match.rhs = {not_op = 'neg'}
tests = [
	{from = '-a + b', to = 'b - a'},
]
[add-with-lhs-negation.rewrite]
base = "1 - 1"
replace = [
    [[0, 0], [1]],
    [[1], [0]],
]

[elim-add-with-0-lhs]
meta = {is_simplify = true}
match.op = '+'
match.lhs = {const = '0'}
replace.from = [1]
replace.to = []
tests = [
	{from = '0 + a', to = 'a'},
]

[elim-add-with-0-rhs]
meta = {is_simplify = true}
match.op = '+'
match.rhs = {const = '0'}
replace.from = [0]
replace.to = []
tests = [
	{from = 'a + 0', to = 'a'},
]

[recip-of-div]
meta = {is_simplify = true}
match.op = '/'
match.lhs = {const = '1'}
match.rhs = {op = '/'}
replace.from = [1]
replace.to = []
tests = [
	{from = '1 / (1/a)', to = '1/a'},
]

[sub-with-lhs-neg]
meta = {is_simplify = true}
match.op = '-'
match.lhs = {op = 'neg'}
match.rhs = {not_op = 'neg'}
tests = [
    {from = '(-a) - b', to = '-(a + b)'},
]
[sub-with-lhs-neg.rewrite]
base = "-(1 + 1)"
replace = [
    [[0, 0], [0, 0]],
    [[1], [0, 1]],
]

[sub-with-rhs-neg]
meta = {is_simplify = true}
match.op = '-'
match.lhs = {not_op = 'neg'}
match.rhs = {op = 'neg'}
tests = [
    {from = 'a--b', to = 'a + b'},
]
[sub-with-rhs-neg.rewrite]
base = "1 + 1"
replace = [
    [[0], [0]],
    [[1, 0], [1]],
]

[elim-sub-num-0-lhs]
meta = {is_simplify = true}
match.op = '-'
match.lhs = {const = '0'}
tests = [
	{from = '0 - a', to = '-a'},
]
[elim-sub-num-0-lhs.rewrite]
base = "-1"
replace = [
    [[1], [0]],
]

[elim-sub-num-0-rhs]
meta = {is_simplify = true}
match.op = '-'
match.rhs = {const = '0'}
replace.from = [0]
replace.to = []
tests = [
	{from = 'a - 0', to = 'a'},
]

[elim-pow-1]
meta = {is_simplify = true}
match.op = 'pow'
match.rhs = {const = '1'}
replace.from = [0]
replace.to = []
tests = [
    {from = 'pow(a, 1)', to = 'a'},
]

[elim-pow-0]
meta = {is_simplify = true}
match.op = 'pow'
match.rhs = {const = '0'}
tests = [
    {from = 'pow(a, 0)', to = '1'},
]
[elim-pow-0.rewrite]
base = "1"
replace = []

[elim-pow-neg-1]
meta = {is_simplify = true}
match.op = 'pow'
match.rhs = {op = 'neg', operand = {const = '1'}}
tests = [
    {from = 'pow(a, -1)', to = '1/a'},
]
[elim-pow-neg-1.rewrite]
base = "1 / 2"
replace = [
	[[0], [1]],
]

[elim-pm-by-0]
meta = {is_simplify = true}
match.op = 'pm'
match.rhs = {const = '0'}
replace.from = [0] # using the numerator (first lhs)
replace.to = []    # overwrite self
tests = [
	{from = 'a Â± 0', to = 'a'},
]